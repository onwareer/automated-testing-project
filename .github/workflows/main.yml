# .github/workflows/main.yml

name: Python Playwright CI

# Triggers the workflow on push or pull request events to the main branch
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    # This is the 'pool' equivalent for GitHub Actions, defining the runner VM image.
    runs-on: ubuntu-22.04 # This is the line you're looking for! You can change this to 'windows-latest' if you prefer.

    steps:
    # Step 1: Checks out your repository code
    - name: Checkout code
      uses: actions/checkout@v4

    # Step 2: Sets up Python version
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9' # You can change this to '3.x' or a specific version like '3.10'

    # Step 3: Installs project dependencies from requirements.txt
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    # Step 4: Installs Playwright browsers
    - name: Install Playwright browsers
      run: |
        playwright install --with-deps

    # Step 5: Runs Pytest tests and generates reports
    # pytest tests/steps/ -v --html=test_report.html --self-contained-html --durations=10 --junitxml=junit_results.xml
    - name: Run Pytest tests
      run: |
        pytest tests/steps/ -v --html=test_report.html --self-contained-html --durations=10 --junitxml=junit_results.xml

    # Step 6: Uploads the JUnit XML test results as an artifact
    - name: Upload JUnit Test Results
      uses: actions/upload-artifact@v4
      if: always() # Always upload, even if tests fail
      with:
        name: junit-test-results
        path: junit_results.xml

    # Step 7: Uploads the HTML test report as an artifact
    - name: Upload HTML Test Report
      uses: actions/upload-artifact@v4
      if: always() # Always upload, even if tests fail
      with:
        name: html-test-report
        path: test_report.html


    # Step 8: Upload the current screenshot as a separate artifact
    - name: Upload Current Screenshot for Baseline Update
      uses: actions/upload-artifact@v4
      if: always() # Always upload, even if tests fail
      with:
        name: products-page-current-screenshot
        path: |
          **/snapshots/*.png
        
