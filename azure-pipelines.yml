# azure-pipelines.yml
# This file will be stored in the root of your GitHub repository.

# Trigger the pipeline on pushes to the 'main' branch
trigger:
- main

# Use a Microsoft-hosted Linux agent (Ubuntu) for the build environment
pool:
  vmImage: 'ubuntu-latest' # Or 'windows-latest' if preferred

variables:
  python.version: '3.9' # Specify the Python version for your tests

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '$(python.version)'
  displayName: 'Install Python $(python.version)'

- displayName: 'Install dependencies from requirements.txt'
  script: |
    python -m pip install --upgrade pip
    pip install -r requirements.txt

- displayName: 'Install Playwright Browsers'
  # This command downloads and installs the necessary browser executables
  # for Playwright to run tests in the CI environment.
  script: |
    playwright install --with-deps

- displayName: 'Run Pytest Tests'
  # This command runs all tests found in the 'tests/steps' directory.
  # -v for verbose output
  # --html generates an HTML report
  # --self-contained-html makes the HTML report a single file
  # --junitxml generates an XML report suitable for Azure DevOps's Test tab
  script: |
    pytest tests/steps/ -v --html=test_report.html --self-contained-html --durations=10 --junitxml=junit_results.xml

- displayName: 'Publish Test Results to Azure DevOps'
  # This task takes the JUnit XML report and publishes results to the "Tests" tab.
  condition: succeededOrFailed() # Ensure this runs even if tests fail
  inputs:
    testResultsFormat: 'JUnit'
    testResultsFiles: 'junit_results.xml' # Path to the JUnit XML file generated by pytest
    testRunTitle: 'Playwright E2E Tests' # A title for your test run

- displayName: 'Publish HTML Test Report as Artifact'
  # This task makes your comprehensive HTML report downloadable from the pipeline run.
  condition: succeededOrFailed() # Ensure this runs even if tests fail
  inputs:
    artifactName: 'TestReports' # Name of the artifact
    pathToPublish: 'test_report.html' # Path to the HTML report file
    publishLocation: 'container' # Publish to pipeline's built-in artifact storage